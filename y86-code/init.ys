elf_header:
.long section_table

text:
loop:
irmovl $0x3, %eax	#syscall num is 3 - read
irmovl $0x0, %ebx 	#fd is 0 - stdin
irmovl $0x1, %ecx 	#read 1 char
irmovl $0x40000000,%esp #reset stack
rrmovl %esp, %edx	#get ready to read to stack
pushl %ebx		#esp -4
rmmovl %ebx, 4(%esp)	#initially zero
.long 0x000000e0
.byte 0			#syscall = 3, fd = 0, readnum = 1, read to stack
mrmovl 4(%esp), %esi
irmovl $0x7b, %edi	#if the char is '{'
subl %edi,%esi
jne loop		#found something to execve
irmovl $0x2, %eax	#syscall num is 2 - fork
.long 0x000000e0
.byte 0
andl %eax,%eax		#am i child process?
je child		#if not, wait for the child process
rrmovl %eax, %ebx
irmovl $7, %eax 
.long 0x000000e0	
.byte 0			#syscall = 7, waiting_pid = %ebx
jmp text
child:
irmovl $0x4000fffc, %edx
loop2:	
irmovl $0x3, %eax		#syscall = 3, fd = 1, readnum = 1, read to sys_arg section
.long 0x000000e0
.byte 0
mrmovl (%edx),%edi	#get the char read just now
irmovl $0x4, %esi	
subl %esi, %edx		#buf[i++]
irmovl $0x7d, %esi	#if the char is '}'
subl %edi,%esi		#arg input finish
jne loop2
irmovl $0x0, %ecx
rmmovl %ecx, 4(%edx)	#replace } with \0
irmovl $0x4000fffc, %ebx
rmmovl %ebx, 0(%edx)	#store argv[0]
rmmovl %ecx, -4(%edx)	#store argv[1] = NULL
irmovl $0x4, %esi
rrmovl %edx, %ebx	#char **argv point at argv[0]
irmovl $0xb, %eax	#syscall = 11(execve), argument = %ebx
.long 0x000000e0
.byte 0
nop
nop
nop
nop
nop
data:
.long 0xabcdabcd
rodata:
bss:
section_table:
text_offset:
.long text
data_offset:
.long data
rodata_offset:
.long rodata
bss_offset:
.long bss

