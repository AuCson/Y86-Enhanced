  0x000:              | elf_header:
  0x000: c8000000     | .long section_table
                      | 
  0x004:              | text:
  0x004:              | loop:
  0x004: 308003000000 | irmovl $0x3, %eax	#syscall num is 3 - read
  0x00a: 308300000000 | irmovl $0x0, %ebx 	#fd is 0 - stdin
  0x010: 308101000000 | irmovl $0x1, %ecx 	#read 1 char
  0x016: 308400000040 | irmovl $0x40000000,%esp #reset stack
  0x01c: 2042         | rrmovl %esp, %edx	#get ready to read to stack
  0x01e: a038         | pushl %ebx		#esp -4
  0x020: 403404000000 | rmmovl %ebx, 4(%esp)	#initially zero
  0x026: e0000000     | .long 0x000000e0
  0x02a: 00           | .byte 0			#syscall = 3, fd = 0, readnum = 1, read to stack
  0x02b: 506404000000 | mrmovl 4(%esp), %esi
  0x031: 30877b000000 | irmovl $0x7b, %edi	#if the char is '{'
  0x037: 6176         | subl %edi,%esi
  0x039: 7404000000   | jne loop		#found something to execve
  0x03e: 308002000000 | irmovl $0x2, %eax	#syscall num is 2 - fork
  0x044: e0000000     | .long 0x000000e0
  0x048: 00           | .byte 0
  0x049: 6200         | andl %eax,%eax		#am i child process?
  0x04b: 7362000000   | je child		#if not, wait for the child process
  0x050: 2003         | rrmovl %eax, %ebx
  0x052: 308007000000 | irmovl $7, %eax 
  0x058: e0000000     | .long 0x000000e0	
  0x05c: 00           | .byte 0			#syscall = 7, waiting_pid = %ebx
  0x05d: 7004000000   | jmp text
  0x062:              | child:
  0x062: 3082fcff0040 | irmovl $0x4000fffc, %edx
  0x068:              | loop2:	
  0x068: 308003000000 | irmovl $0x3, %eax		#syscall = 3, fd = 1, readnum = 1, read to sys_arg section
  0x06e: e0000000     | .long 0x000000e0
  0x072: 00           | .byte 0
  0x073: 507200000000 | mrmovl (%edx),%edi	#get the char read just now
  0x079: 308604000000 | irmovl $0x4, %esi	
  0x07f: 6162         | subl %esi, %edx		#buf[i++]
  0x081: 30867d000000 | irmovl $0x7d, %esi	#if the char is '}'
  0x087: 6176         | subl %edi,%esi		#arg input finish
  0x089: 7468000000   | jne loop2
  0x08e: 308100000000 | irmovl $0x0, %ecx
  0x094: 401204000000 | rmmovl %ecx, 4(%edx)	#replace } with \0
  0x09a: 3083fcff0040 | irmovl $0x4000fffc, %ebx
  0x0a0: 403200000000 | rmmovl %ebx, 0(%edx)	#store argv[0]
  0x0a6: 4012fcffffff | rmmovl %ecx, -4(%edx)	#store argv[1] = NULL
  0x0ac: 308604000000 | irmovl $0x4, %esi
  0x0b2: 2023         | rrmovl %edx, %ebx	#char **argv point at argv[0]
  0x0b4: 30800b000000 | irmovl $0xb, %eax	#syscall = 11(execve), argument = %ebx
  0x0ba: e0000000     | .long 0x000000e0
  0x0be: 00           | .byte 0
  0x0bf: 00           | nop
  0x0c0: 00           | nop
  0x0c1: 00           | nop
  0x0c2: 00           | nop
  0x0c3: 00           | nop
  0x0c4:              | data:
  0x0c4: cdabcdab     | .long 0xabcdabcd
  0x0c8:              | rodata:
  0x0c8:              | bss:
  0x0c8:              | section_table:
  0x0c8:              | text_offset:
  0x0c8: 04000000     | .long text
  0x0cc:              | data_offset:
  0x0cc: c4000000     | .long data
  0x0d0:              | rodata_offset:
  0x0d0: c8000000     | .long rodata
  0x0d4:              | bss_offset:
  0x0d4: c8000000     | .long bss
                      | 
